Namespaces:
  =: io.murano.apps.paas
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  apps: io.murano.apps


Name: LatticeCell

Extends: std:Application

Properties:
  instance:
    Contract: $.class(res:Instance).notNull()

Methods:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()

  deploy:
    Arguments:
      - lattice_tar_url:
          Contract: $.string().notNull()

      - brain_ip:
          Contract: $.string().notNull()

      - cell_id:
          Contract: $.string().notNull()
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $log: $this.find(std:Environment).reporter
          - $securityGroupIngress:
              - ToPort: 65535
                FromPort: 1
                IpProtocol: tcp
                External: True
          - $.environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $log.report($this,'Creating VM for Lattice Cell server')
          - $.instance.deploy()
          - $log.report($this,'Installing Lattice Cell')
          - $resources: new(sys:Resources)

          - $cell_ip: $.getIp()
          - $template: $resources.yaml('SetVarCell.template').bind(dict(
                COORDINATOR_IP => $brain_ip,
                GARDEN_EXTERNAL_IP => $cell_ip,
                LATTICE_CELL_ID => $cell_id
              ))
          - $.instance.agent.call($template, $resources)

          - $template: $resources.yaml('InstallCell.template').bind(dict(
                LATTICE_TAR_URL => $lattice_tar_url
              ))
          - $.instance.agent.call($template, $resources)

          - $log.report($this,'Lattice Cell installation is complete')
          - $.setAttr(deployed, True)

  getIp:
    Body:
      Return: $.instance.ipAddresses[0]